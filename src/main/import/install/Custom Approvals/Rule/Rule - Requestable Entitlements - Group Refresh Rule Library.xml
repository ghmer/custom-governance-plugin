<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Requestable Entitlements - Group Refresh Rule Library">
    <Source>
<![CDATA[
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import sailpoint.api.SailPointContext;
import sailpoint.object.Application;
import sailpoint.object.Custom;
import sailpoint.object.Identity;
import sailpoint.object.ManagedAttribute;
import sailpoint.object.ResourceObject;
import sailpoint.object.Rule;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Util;

public void processEntitlementConfig(Custom config, ResourceObject obj, ManagedAttribute accountGroup, Application groupApplication) throws GeneralException {
  //getting information
  Map generalConfig = getGeneralConfig(config);
  Map appConfig = null;
  if(hasApplicationDefinition(config, groupApplication.getName())) {
    appConfig = getAppConfig(config, groupApplication.getName());
  }
  
  // general Configuration
  String governanceAttribute  = (String)  generalConfig.get("governanceAttribute");
  String defaultOwner         = (String)  generalConfig.get("defaultOwner");
  
  if(appConfig != null) {
    boolean configHit = false;
    
    List entConf = getAppEntitlementConfig(appConfig, groupApplication.getName());
    if(entConf != null && !entConf.isEmpty()) {
      for(Map entry : entConf) {      
        configHit = isEntitlementMatchingConfig(obj, accountGroup, groupApplication, entry);      
        if(configHit) {
          applyChangesToEntitlement(obj, accountGroup, groupApplication, 
              entry, defaultOwner, governanceAttribute);
          break;
        }
      }
    }
    
    Map appDefaultConfig = getAppDefaultConfig(appConfig, groupApplication.getName());
    if(appDefaultConfig == null) {
      String message = String.format("Config for application %s does not contain a default configuration", groupApplication.getName());
      log.error(message);
      throw new GeneralException(message);
    }
    
    if(!configHit) {       
      applyChangesToEntitlement(accountGroup, appDefaultConfig, defaultOwner, governanceAttribute);
    }
    
    Boolean runAfterRule = false;
    if(appDefaultConfig.containsKey("runAfterRule")) {
      runAfterRule = Boolean.valueOf(String.valueOf(appDefaultConfig.get("runAfterRule")));
    }
    if(runAfterRule) {
      String afterafterRuleName = String.valueOf(appDefaultConfig.get("runAfterRule"));
      accountGroup = (ManagedAttribute) runRule(accountGroup, obj, groupApplication, afterafterRuleName);
    }
    
  } else {
    applyChangesToEntitlement(accountGroup, generalConfig, "spadmin", governanceAttribute);
  }
}

private void applyChangesToEntitlement(ManagedAttribute accountGroup, Map appDefaultConfig, 
    String fallbackOwnerName, String governanceAttribute) throws GeneralException {
  String  fallbackApprover      = (String)  appDefaultConfig.get("defaultOwner");
  String  defaultApprovalLevel  = (String)  appDefaultConfig.get("defaultApprovalLevel");
  Boolean isRequestable         = Boolean.valueOf((String) appDefaultConfig.get("isRequestable"));
  
  String ownerName = fallbackApprover;
  
  if(Util.isNullOrEmpty(fallbackApprover))  {
    log.error(String.format("No defaultApprover defined. Using fallback %s", fallbackOwnerName));
    ownerName = fallbackOwnerName;
  }
  
  Identity owner = context.getObject(Identity.class, ownerName);
  if(owner == null) {
    String message = String.format("Could not retrieve identity %s. fallbackApprover was %s", ownerName, fallbackOwnerName);
    log.error(message);
    throw new GeneralException(message);
  }
  
  accountGroup.setOwner(owner);
  accountGroup.setAttribute(governanceAttribute, defaultApprovalLevel);
  accountGroup.setRequestable(isRequestable);
  log.warn("isRequestable: " + isRequestable);
}

private Map getAppConfig(Custom config, String applicationName) throws GeneralException {
  Map result = null;
  Map appConfig = (Map) config.get("ApplicationConfiguration");
  if(appConfig == null) {
    log.error(String.format("Custom configuration ->%s<- does not contain node %s", config.getName(), "ApplicationConfiguration"));
    throw new GeneralException(String.format("Custom configuration ->%s<- does not contain node %s", config.getName(), "ApplicationConfiguration"));
  }
  
  if(appConfig.containsKey(applicationName)) {
    result = appConfig.get(applicationName);
  }
     
  return result;
}

private List getAppEntitlementConfig(Map appConfig, String applicationName) throws GeneralException {
  List result = new ArrayList();
  if(!appConfig.containsKey("EntitlementConfiguration")) {
    String message = String.format("Configuration for appliation %s did not contain node %s", applicationName, "EntitlementConfiguration");
    log.error(message);
    throw new GeneralException(message);
  }
  result = (List) appConfig.get("EntitlementConfiguration");
  
  
  return result;
}

private Map getAppDefaultConfig(Map appConfig, String applicationName) throws GeneralException {
  Map result = new HashMap();
  if(!appConfig.containsKey("GeneralConfiguration")) {
    String message = String.format("Configuration for appliation %s did not contain node %s", applicationName, "GeneralConfiguration");
    log.error(message);
    throw new GeneralException(message);
  }
  result = (Map) appConfig.get("GeneralConfiguration");
  
  
  return result;
}

private boolean hasApplicationDefinition(Custom config, String applicationName) {
  boolean hasDefinition = false;
  Map applicationConfiguration = null;
  if(config.containsAttribute("ApplicationConfiguration")) {
    applicationConfiguration = (Map) config.get("ApplicationConfiguration");
  }
  if(applicationConfiguration != null) {
    hasDefinition = applicationConfiguration.containsKey(applicationName);
  }
  
  return hasDefinition;
}

private Map getGeneralConfig(Custom config) throws GeneralException {
  Map result = null;
  Map generalConfig = (Map) config.get("GeneralConfiguration");
  if(generalConfig == null) {
    String message = String.format("Custom configuration ->%s<- does not contain node %s", config.getName(), "GeneralConfiguration");
    log.error(message);
    throw new GeneralException(message);
  }
  
  result = generalConfig;
     
  return result;
}

private void applyChangesToEntitlement(ResourceObject resourceObject, ManagedAttribute accountGroup,
    Application groupApplication, Map configuration, 
    String fallbackOwnerName, String governanceAttribute) throws GeneralException {
  
  String   appGovValue    = (String) configuration.get("governanceLevel");
  String   selectionType  = (String) configuration.get("ownerSelectionType");
  String   staticOwner    = (String) configuration.get("staticOwner");
  String   ruleName       = (String) configuration.get("ownerSelectionRuleName");
  Boolean isRequestable   = Boolean.valueOf((String) configuration.get("isRequestable"));
  
  String ownerName = null;
  
  switch(selectionType.toLowerCase()) {
    case "static" : ownerName = staticOwner; break;
    case "rule"   : ownerName = (String) runRule(accountGroup, resourceObject, groupApplication, ruleName); break;
    default       : {
      String message = "Unknown selection type " + selectionType;
      log.error(message);
      throw new GeneralException(message);
    }
  }
  
  if(Util.isNullOrEmpty(ownerName))  {
    if(selectionType.equalsIgnoreCase("rule")) {
      log.error(String.format("Rule ->%s<- did not return an owner. That's not a good thing. Using fallback approver %s", ruleName, fallbackOwnerName));
    }
    ownerName = fallbackOwnerName;
  }
  
  Identity owner = context.getObject(Identity.class, ownerName);
  if(owner == null) {
    String message = String.format("Could not retrieve identity %s. Selection type was %s, fallbackApprover was %s", ownerName, selectionType, fallbackOwnerName);
    log.error(message);
    throw new GeneralException(message);
  }
  
  accountGroup.setOwner(owner);
  accountGroup.setAttribute(governanceAttribute, appGovValue);
  accountGroup.setRequestable(isRequestable);
  log.warn("isRequestable: " + isRequestable);
}

private boolean isEntitlementMatchingConfig(ResourceObject resourceObject, ManagedAttribute accountGroup,
    Application groupApplication, Map configuration) throws GeneralException {
  boolean configHit         = false;
  String selectionType      = (String)  configuration.get("selectionType");
  String regexAttribute     = (String)  configuration.get("selectionRegexAttribute");
  String regexValue         = (String)  configuration.get("selectionRegexValue");
  String ruleName           = (String)  configuration.get("selectionRuleName");
  
  if(Util.isNullOrEmpty(selectionType)) {
    String message = "empty selectionType";
    log.error(message);
    throw new GeneralException(message);
  }
  switch(selectionType.toLowerCase()) {
    case "regex" : configHit = handleRegexSelection(accountGroup, regexAttribute, regexValue); break;
    case "rule"  : configHit = (boolean) runRule(accountGroup, resourceObject, groupApplication, ruleName); break;
    default      : {
      String message = "Unknown selection type " + selectionType;
      log.error(message);
      throw new GeneralException(message);
    }
  }
  return configHit;
}

private Object runRule(ManagedAttribute accountGroup, ResourceObject obj, Application groupApplication,
    String ruleName) throws GeneralException {
  Object result = null;
  Rule rule = context.getObject(Rule.class, ruleName);
  Map arguments = new HashMap();
  arguments.put("context", context);
  arguments.put("log", log);
  arguments.put("accountGroup", accountGroup);
  arguments.put("obj", obj);
  arguments.put("groupApplication", groupApplication);
  
  result = context.runRule(rule, arguments);
  
  return result;
}

private boolean handleRegexSelection(ManagedAttribute accountGroup, String regexAttribute, String regexValue) throws GeneralException {
  Boolean regexHit    = false;
  String valueToCheck = null;
  
  switch(regexAttribute.toLowerCase()) {
    case "displayname" : valueToCheck = accountGroup.getDisplayName(); break;
    case "value"       : valueToCheck = accountGroup.getValue(); break;
    case "type"        : valueToCheck = accountGroup.getType(); break;
    case "attribute"   : valueToCheck = accountGroup.getAttribute(); break;
    default            : valueToCheck = (String) accountGroup.get(regexAttribute); break;
  }
  
  if(Util.isNullOrEmpty(valueToCheck)) {
    String message = "managed attribute does not contain regexAttribute " + regexAttribute;
    log.error(message);
    throw new GeneralException(message);
  }
  
  regexHit = valueToCheck.matches(regexValue);
  
  return regexHit;
}
 
]]>
  </Source>
</Rule>