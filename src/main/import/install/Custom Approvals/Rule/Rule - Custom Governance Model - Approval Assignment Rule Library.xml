<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Custom Governance Model - Approval Assignment Rule Library">
	<Description></Description>
	<Source>
<![CDATA[
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.log4j.Logger;

import sailpoint.api.ManagedAttributer;
import sailpoint.api.SailPointContext;
import sailpoint.object.Application;
import sailpoint.object.ApprovalItem;
import sailpoint.object.ApprovalSet;
import sailpoint.object.Attributes;
import sailpoint.object.Bundle;
import sailpoint.object.Custom;
import sailpoint.object.Identity;
import sailpoint.object.ManagedAttribute;
import sailpoint.object.Rule;
import sailpoint.object.Workflow;
import sailpoint.object.WorkItem.State;
import sailpoint.object.Workflow.Approval;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Util;

//Helper method to generate a configuration Map.
private Map generateBaseApprovalVariablesMap(Workflow workflow) throws GeneralException {
  Map result = new HashMap();

  if (null == workflow) {
    log.error("Worflow not set!");
    throw new GeneralException("Workflow not set!");
  }

  if (Util.isNullOrEmpty((String) workflow.get("identityName"))) {
    log.error("Workflow variable identityName not set!");
    throw new GeneralException("Workflow variable identityName not set!");
  }

  // Should not have to change the following constants
  result.put("governanceModelName", "Custom Governance Model");
  result.put("delimiter", ":");
  result.put("defaultDescPrefix", "Access Request");
  result.put("governanceAttr", "governanceApprovalLevel");
  result.put("approvalKey", "approval");
  result.put("notificationKey", "notification");
  result.put("approvalLevelKey", "approvalLevels");
  result.put("approvalRuleKey", "approverLookupRules");
  result.put("identityName", workflow.get("identityName"));
  result.put("identityDisplayName", Util.isNullOrEmpty((String) workflow.get("identityDisplayName")) ? result.get("identityName") : workflow.get("identityDisplayName"));
  result.put("launcher", workflow.get("launcher"));
  result.put("securityOfficer", workflow.get("securityOfficerName"));
  result.put("notificationScheme", Util.csvToSet((String) workflow.get("notificationScheme"), true));
  result.put("fallbackApprover", (String)workflow.get("fallbackApprover"));
  result.put("notificationSchemeUpdated", false);

  return result;
}

//Helper method to generate an approval work item description based on an optional prefix
private String generateApprovalDesc(String prefix, String identityName) {
  String desc = "Approval - Account Changes for User: " + identityName;
  return (Util.isNullOrEmpty(prefix)) ? desc : prefix + " " + desc;
}

// Helper method to generate an auto-approval work item description based on an optional prefix
private String generateApprovedApprovalDesc(String prefix, String identityName) {
  String desc = "Auto Approved - Account Changes for User: " + identityName;
  return (Util.isNullOrEmpty(prefix)) ? desc : prefix + " " + desc;
}

// Helper method to create a new Workflow.Approval
private Approval createApproval(String desc, String owner, String identityName, ApprovalItem item) {
  Approval appr = new Approval();
  appr.setDescription(desc);
  appr.setOwner(owner);
  ApprovalSet apprSet = new ApprovalSet();
  apprSet.add(item);
  appr.setApprovalSet(apprSet);
  appr.addArg("workItemTargetClass", "sailpoint.object.Identity");
  appr.addArg("workItemTargetName", identityName);
  appr.addArg("workItemNotificationTemplate", "LCM Identity Update Approval");

  return appr;
}

// Helper method to create a new Auto-Approved Workflow.Approval
private Approval createApprovedApproval(String desc, String owner, String identityName, ApprovalItem item) {
  Approval appr = new Approval();
  appr.setState(State.Finished);
  appr.setComplete(true);
  appr.setDescription(desc);
  if(owner.equalsIgnoreCase("Auto Approved")) {
    appr.setOwner("spadmin");
  }else {
    appr.setOwner(owner);
  }

  ApprovalSet apprSet = new ApprovalSet();
  item.approve();
  item.setState(State.Finished);
  apprSet.add(item);
  appr.setApprovalSet(apprSet);
  appr.addArg("workItemTargetClass", "sailpoint.object.Identity");
  appr.addArg("workItemTargetName", identityName);
  appr.addArg("workItemNotificationTemplate", "LCM Identity Update Approval");

  return appr;
}

private void handleEmptyApproverList(List approvals, List finalApprovals,
    ApprovalItem approvalItem, String identityName) {
  log.debug("No additional approvals necessary.");
  // Add back default approvals for the approval item
  for (Approval approval : approvals) {
    handleEmptyApprover(finalApprovals, approvalItem, identityName, approval);
  }
}

private void handleEmptyApprover(List finalApprovals, ApprovalItem approvalItem, String identityName,
    Approval approval) {
  ApprovalSet approvalSet = approval.getApprovalSet();
  String approvalOwner    = approval.getOwner();
  if (approvalSet != null && approvalSet.find(approvalItem) != null && Util.isNotNullOrEmpty(approvalOwner)) {
    // remove quote characters from owner string
    approvalOwner = approvalOwner.replace("\"", "");
    if (log.isDebugEnabled()) { log.debug("Searching existing approvals for " + approvalOwner); }
    boolean newApproval = true;
    for (Approval existingApproval : finalApprovals) {
      if (approvalOwner.equals(existingApproval.getOwner())) {
        log.debug("Match found, adding default approval item to existing approval...");
        // TODO: turn this into a function??
        ApprovalSet existingApprovalSet = existingApproval.getApprovalSet();
        if (null != existingApprovalSet && existingApprovalSet.find(approvalItem) == null) {
          existingApprovalSet.add(approvalItem);
          existingApproval.setApprovalSet(existingApprovalSet);
        }
        newApproval = false;
        break;
      }
    }
    if (newApproval) {
      log.debug("No match found, creating new default approval...");
      finalApprovals.add(createApproval(approval.getDescription(), approvalOwner, identityName, approvalItem));
    }
  }
}

private void determineApprovalAndNotificationSchemes(Map governanceLevels, Map approvalVariables, Attributes requestObjectAttributes) {
  // Determine the approval and notification schemes based on governance level
  List approverList             = new ArrayList();
  List customNotificationScheme = new ArrayList();
  String approvalLevel          = requestObjectAttributes.getString((String) approvalVariables.get("governanceAttr"));

  log.trace("specified level: " + approvalLevel);
  if (!Util.isNullOrEmpty(approvalLevel) && governanceLevels.containsKey(approvalLevel)) {
    if (log.isDebugEnabled()) {
      log.debug("Using approval and notification schemes for Governance " + Util.splitCamelCase(approvalLevel));
    }
    Map governanceLevel       = (HashMap) governanceLevels.get(approvalLevel);
    approverList              = (List) governanceLevel.get(approvalVariables.get("approvalKey"));
    customNotificationScheme  = (List) governanceLevel.get(approvalVariables.get("notificationKey"));
    Set notificationScheme    = (Set) approvalVariables.get("notificationScheme");
    if (Util.isEmpty(customNotificationScheme)) {
      log.warn("No notification scheme set for specified governance level");
      // Merge custom notifications with the existing notificaiton scheme
    } else if (notificationScheme.addAll(new HashSet(customNotificationScheme))) {
      log.debug("Notification scheme updated");
      approvalVariables.put("notificationSchemeUpdated", true);
    }

    approvalVariables.put("approverList", approverList);
  }
}

private Map getRequestObjectInfoForRoles(ApprovalItem approvalItem) throws GeneralException {
  Map result              = new HashMap();
  List valueList          = approvalItem.getValueList();
  String assignmentValue  = null;
  if (Util.isEmpty(valueList)) {
    log.error("Could not get value of ApprovalItem as a List!");
  } else {
    assignmentValue = (String) valueList.get(0);
  }

  Attributes requestObjectAttributes = null;
  Identity requestObjectOwner        = null;

  Bundle role = null;
  try {
    role = context.getObjectByName(Bundle.class, assignmentValue);
  } catch(GeneralException ge) {
    log.error("Exception caught while retriving SailPoint Bundle object with the name: "+assignmentValue);
  }

  if (null != role) {
    requestObjectAttributes = role.getAttributes();
    requestObjectOwner = role.getOwner();
  }

  if (requestObjectAttributes == null) {
    log.error("Could not get role attributes!");
    throw new GeneralException("Could not get role attributes");
  }

  result.put("attributes", requestObjectAttributes);
  result.put("owner", requestObjectOwner);

  return result;
}

private Map getRequestObjectInfoForEntitlements(ApprovalItem approvalItem) throws GeneralException {
  Map result              = new HashMap();
  List valueList          = approvalItem.getValueList();
  String assignmentValue  = null;
  if (Util.isEmpty(valueList)) {
    log.error("Could not get value of ApprovalItem as a List!");
  } else {
    assignmentValue = (String) valueList.get(0);
  }

  Attributes requestObjectAttributes = null;
  Identity requestObjectOwner        = null;


  String assignmentName = approvalItem.getName();
  Application app = null;
  try {
    app = context.getObjectByName(Application.class, approvalItem.getApplication());
  }
  catch(GeneralException ge) {
    log.error("Exception caught while retriving SailPoint Application object!");
  }

  if (app != null) {
    ManagedAttribute entitlement = null;
    try {
      entitlement = ManagedAttributer.get(context, app, assignmentName, assignmentValue);
    }
    catch(GeneralException ge) {
      log.error("Exception caught while retriving SailPoint ManagedAttribute object!");
    }

    if (null != entitlement) {
      requestObjectAttributes = entitlement.getAttributes();
      requestObjectOwner      = entitlement.getOwner();
    }

    if (requestObjectAttributes == null) {
      log.error("Could not get role attributes!");
      throw new GeneralException("Could not get managed object attributes");
    }
  }

  result.put("attributes", requestObjectAttributes);
  result.put("owner", requestObjectOwner);

  return result;
}

private String determineRequestType(ApprovalItem item) {
  String operation    = (String) item.getAttribute("operation");
  String requestType  = null;
  if(operation != null) {
    if (operation.indexOf("Role") > -1) {
      requestType = "Role";
    } else if(operation.indexOf("Entitlement") > -1) {
      requestType = "Entitlement";
    } else {
      requestType = "Account";
    }
  }

  return requestType;
}

private Attributes getGovernanceLevels(String governanceModelName) throws GeneralException {
  Custom governanceModel      = null;
  Attributes governanceLevels = null;
  try { governanceModel = context.getObjectByName(Custom.class, governanceModelName); }
  catch(GeneralException ge) {
    log.error("Exception caught while retriving SailPoint Custom object with the name: "+governanceModelName);
  }

  if (null == governanceModel) {
    log.error("Could not get governance model!");
    throw new GeneralException("Could not get governance Model");
  }

  if (log.isTraceEnabled()) {
    log.trace("Governance Model:\n"+governanceModel.toXml());
  }
  governanceLevels = governanceModel.getAttributes();
  if (null == governanceLevels) {
    log.error("Could not get attributes from custom governance model!");
    throw new GeneralException("Could not get attributes from custom governance model");
  }

  return governanceLevels;
}

private void handleApproverList(Map approvalVariables, List finalApprovals, ApprovalItem approvalItem,
    List approverList, Map governanceApproverRules) throws GeneralException {
  if (log.isDebugEnabled()) {
    log.debug("Approval Scheme:\n" + approverList.toString());
  }

  for (String approver : approverList) {
    String approvalOwner  = null;
    String descPrefix     = null;

    boolean type_error = false,lookup_error = false;

    descPrefix = Util.splitCamelCase(approver);
    approvalOwner = runRule(approvalVariables, approvalItem, approver, governanceApproverRules);


    if (Util.isNullOrEmpty(approvalOwner) || Util.nullSafeEq(approvalOwner, approvalVariables.get("launcher"))) {
      log.warn("Skipping approval type " + approver);
    } else {
      Approval approvalObject = null;
      for (Approval existingApproval : finalApprovals) {
        if (approvalOwner.equals(existingApproval.getOwner())) {
          approvalObject = existingApproval;
          break;
        }
      }

      if (null == approvalObject) {
        addNewApproval(approvalVariables, finalApprovals, approvalItem, approvalOwner, descPrefix);
      } else {
        addToExistingApproval(approvalVariables, approvalItem, descPrefix, approvalObject);
      }
    }
  }
}

private String runRule(Map approvalVariables, ApprovalItem approvalItem, String approver, Map governanceApproverRules) throws GeneralException {
  String result   = null;
  Rule ruleObject = null;
  try {
    String ruleName = (String) governanceApproverRules.get(approver);
    if(!Util.isNullOrEmpty(ruleName)) {
      ruleObject = context.getObject(Rule.class, ruleName);
    }

    if(ruleObject == null) {
      log.error("no rule defined for approver " + approver);
      throw new GeneralException("no rule defined for approver " + approver);
    }


    Map ruleArgumentMap = new HashMap();
    ruleArgumentMap.put("log", log);
    ruleArgumentMap.put("identityName", approvalVariables.get("identityName"));
    ruleArgumentMap.put("identityDisplayName", approvalVariables.get("identityDisplayName"));
    ruleArgumentMap.put("launcher", approvalVariables.get("launcher"));
    ruleArgumentMap.put("approvalItem", approvalItem);
    ruleArgumentMap.put("requestObjectAttributes", approvalVariables.get("attributes"));
    ruleArgumentMap.put("owner", approvalVariables.get("owner"));
    ruleArgumentMap.put("fallbackApprover", approvalVariables.get("fallbackApprover"));
    ruleArgumentMap.put("context", context);

    result = (String)context.runRule(ruleObject, ruleArgumentMap);
  } catch(Exception e) {
    log.error(e.getMessage());
    throw new GeneralException(e);
  }

  return result;
}

private void addToExistingApproval(Map approvalVariables, ApprovalItem approvalItem, String descPrefix,
    Approval approvalObject) {
  // Add approval item to existing approval
  ApprovalSet existingApprovalSet = approvalObject.getApprovalSet();
  if (null != existingApprovalSet && existingApprovalSet.find(approvalItem) == null) {
    existingApprovalSet.add(approvalItem);
    approvalObject.setApprovalSet(existingApprovalSet);
    if (!approvalObject.getDescription().startsWith(descPrefix)) {
      approvalObject.setDescription(generateApprovalDesc((String) approvalVariables.get("defaultDescPrefix"), (String) approvalVariables.get("identityDisplayName")));
    }
  }
}

private void addNewApproval(Map approvalVariables, List finalApprovals, ApprovalItem approvalItem,
    String approvalOwner, String descPrefix) {
  // Existing approval not found, create a new one
  if(approvalOwner.equalsIgnoreCase("Auto Approved")) {
    finalApprovals.add(createApprovedApproval(generateApprovedApprovalDesc(descPrefix, (String) approvalVariables.get("identityDisplayName")), approvalOwner, (String) approvalVariables.get("identityName"), approvalItem));
  }else {
    finalApprovals.add(createApproval(generateApprovalDesc(descPrefix, (String) approvalVariables.get("identityDisplayName")), approvalOwner, (String) approvalVariables.get("identityName"), approvalItem));
  }
}

public List processApprovalSet(ApprovalSet approvalSet, List approvals, Workflow workflow) throws GeneralException {
  Map approvalVariables = generateBaseApprovalVariablesMap(workflow);
  // Initialize finalApprovals to an empty list to hold any additional approvals needed
  List finalApprovals     = new ArrayList();

  if (null == approvals) {
    log.warn("No default approvals set!");
  }

  if (null == approvalSet) {
    log.error("ApprovalSet not set!");
    throw new GeneralException("ApprovalSet not set");
  }

  if (log.isTraceEnabled()) {
    log.trace("Approval Set:\n"+approvalSet.toXml());
  }

  Attributes governanceConfiguration = getGovernanceLevels((String) approvalVariables.get("governanceModelName"));

  for (ApprovalItem approvalItem : approvalSet.getItems()) {
    String requestType = determineRequestType(approvalItem);
    Map requestObject  = new HashMap();
    switch(requestType) {
      case "Role"         : requestObject = getRequestObjectInfoForRoles(approvalItem); break;
      case "Entitlement"  : requestObject = getRequestObjectInfoForEntitlements(approvalItem); break;
      case "Account"      : break;
      default: throw new GeneralException("requestType could not be determined");
    }

    if(requestType.equals("Account")) {
      //returning default approvals
      return approvals;
    }

    approvalVariables.put("owner", requestObject.get("owner"));
    approvalVariables.put("attributes", requestObject.get("attributes"));

    Map governanceLevels = (Map) governanceConfiguration.get(approvalVariables.get("approvalLevelKey"));
    determineApprovalAndNotificationSchemes(governanceLevels, approvalVariables, (Attributes) requestObject.get("attributes"));
    List approverList = (List) approvalVariables.get("approverList");
    if (Util.isEmpty(approverList)) {
      handleEmptyApproverList(approvals, finalApprovals, approvalItem, (String) approvalVariables.get("identityName"));
    } else {
      Map governanceApproverRules = (Map) governanceConfiguration.get(approvalVariables.get("approvalRuleKey"));
      handleApproverList(approvalVariables, finalApprovals, approvalItem, approverList, governanceApproverRules);

    }
  }
  return finalApprovals;
}
]]>
  </Source>
</Rule>